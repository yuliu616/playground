management.endpoints.web.exposure.include: gateway

server.port: 8888
spring:
  application.name: api-gateway
  zipkin:
    enabled: true
    baseUrl: http://127.0.0.1:9411
  cloud:
    loadbalancer:
      ribbon:
        enabled: false
      health-check:
        initial-delay: 0
        interval: 5000 #ms
        refetch-instances-interval: 5000 #ms
        refetch-instances: true
        repeat-health-check: true
        path:
          auth-service: /api/1.0/about
    gateway:
      enabled: true # default = true
      metrics.enabled: true # default = true
      httpclient:
        connect-timeout: 1000
        response-timeout: 15s
      routes:
      # simple routing with prefix (while path rewritten to remove the prefix)
      - id: route1
        uri: http://127.0.0.1:8080
        predicates:
        - Path=/api/hello-service/1.0/**
        filters:
        - RewritePath=/api/hello-service/(?<segment>/?.*), /api/$\{segment}
      # simple routing with prefix (while path rewritten to remove the prefix)
      - id: route2
        uri: http://127.0.0.1:8082
        predicates:
          - Path=/api/people-service/1.0/**
        filters:
          - RewritePath=/api/people-service/(?<segment>/?.*), /api/$\{segment}
      # routing to eureka defined service (while path rewritten to remove the prefix)
      - id: route3
        uri: lb://property-service
        predicates:
          - Method=GET
          - Path=/api/property-service/1.0/**
        filters:
          - RewritePath=/api/property-service/(?<segment>/?.*), /api/$\{segment}
      # route with circuitBreaker for the proxy
      - id: route4
        uri: lb://property-service
        predicates:
          - Method=POST,PUT
          - Path=/api/property-service/1.0/**
        filters:
          - RewritePath=/api/property-service/(?<segment>/?.*), /api/$\{segment}
          - name: CircuitBreaker
            args:
              name: myCircuitBreaker
              statusCodes:
                - 500
      # limit requests rate for login/refresh login
      - id: route5
        uri: lb://auth-service
        predicates:
          - Method=GET
          - Path=/api/auth-service/1.0/**
        filters:
          - RewritePath=/api/auth-service/(?<segment>/?.*), /api/$\{segment}
      - id: route6
        uri: lb://auth-service
        predicates:
          - Method=POST
          - Path=/api/auth-service/1.0/login
        filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter.replenishRate: 20
            redis-rate-limiter.burstCapacity: 20
            redis-rate-limiter.requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: POST
            statuses:
              - TOO_MANY_REQUESTS
              - GATEWAY_TIMEOUT
            series: # default = SERVER_ERROR/5xx
              - SERVER_ERROR
            backoff: # formula:  t = firstBackoff * (factor ^ n)
              firstBackoff: 3000ms
              maxBackoff: 30000ms
              factor: 2
              basedOnPreviousValue: false
        - SetPath=/api/1.0/login
        metadata:
          response-timeout: 50
      - id: route7
        uri: lb://auth-service
        predicates:
          - Method=POST
          - Path=/api/auth-service/1.0/login/refreshToken
        filters:
          - name: RequestRateLimiter
            args:
              redis-rate-limiter.replenishRate: 80
              redis-rate-limiter.burstCapacity: 80
              redis-rate-limiter.requestedTokens: 1
          - SetPath=/api/1.0/login/refreshToken
resilience4j.circuitbreaker:
  configs:
    default:
      register-health-indicator: true
      failure-rate-threshold: 50
      minimum-number-of-calls: 6
      sliding-window-size: 4
      sliding-window-type: COUNT_BASED
      ring-buffer-size-in-closed-state: 10
      ring-buffer-size-in-half-open-state: 3
      eventConsumerBufferSize: 10
      permitted-number-of-calls-in-half-open-state: 1
      automatic-transition-from-open-to-half-open-enabled: true
      wait-duration-in-open-state: 10s
      recordExceptions:
      - org.springframework.web.client.HttpServerErrorException
      - java.io.IOException
      - java.lang.NullPointerException
      - java.lang.RuntimeException
      - java.util.concurrent.TimeoutException
  instances:
    myCircuitBreaker:
      baseConfig: default